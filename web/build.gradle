buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE")
        classpath 'org.postgresql:postgresql:42.2.0'
        classpath 'org.ajoberstar:grgit:2.0.1'
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.7.RELEASE'
    id "com.moowork.node" version "1.2.0"
}
apply plugin: 'java'


jar {
    baseName = 'app-govhack-portal'
}

springBoot {
    executable = true
    mainClass = "org.govhack.portal.PortalApplication"
}

configurations.all {
    // Check for SNAPSHOT updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    // Web
    compile group: 'org.freemarker', name: 'freemarker', version: freemarker_version
    compile "org.springframework:spring-web:${spring_version}"
    compile "org.springframework:spring-webmvc:${spring_version}"
    compile "org.springframework:spring-context-support:${spring_version}"
    compile "org.springframework.security:spring-security-core:${spring_security_version}"
    compile "org.springframework.security:spring-security-web:${spring_security_version}"
    compile "org.springframework.security:spring-security-config:${spring_security_version}"
    compile "org.springframework.security:spring-security-taglibs:${spring_security_version}"
    compile group: 'org.springframework.session', name: 'spring-session', version: '1.3.2.RELEASE'


    compile "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"

    // Boot
    compile "org.springframework.boot:spring-boot:${spring_boot_version}"
    compile "org.springframework.boot:spring-boot-autoconfigure:${spring_boot_version}"
    compile "org.springframework.boot:spring-boot-starter-aop:${spring_boot_version}"
    compile "org.springframework.boot:spring-boot-starter-tomcat:${spring_boot_version}"
    compile "org.aspectj:aspectjweaver:1.8.13"

    // Database
    compile "com.zaxxer:HikariCP:2.7.6"
    compile "org.postgresql:postgresql:42.2.0"
    compile "org.springframework.data:spring-data-jpa:1.11.3.RELEASE"
    compile "org.hibernate:hibernate-core:${hibernate_version}"
    compile "org.hibernate:hibernate-entitymanager:${hibernate_version}"
    compile "org.hibernate:hibernate-java8:${hibernate_version}"
    compile "org.hibernate:hibernate-ehcache:${hibernate_version}"
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.4.2.Final'

    // Util
    compile "ch.qos.logback:logback-classic:${logback_version}"
    compile "org.yaml:snakeyaml:1.18"
    compile "org.apache.commons:commons-lang3:${commons_lang3_version}"
    compile "commons-io:commons-io:${commons_io_version}"
    compile "com.google.guava:guava:${guava_version}"
    compile 'org.apache.commons:commons-exec:1.3'
    compile 'commons-fileupload:commons-fileupload:1.3.3'
    compile 'org.elasticsearch:elasticsearch:2.4.1'
    compile group: 'io.vavr', name: 'vavr', version: '0.9.2'

    // testing
    testCompile 'junit:junit:4.12'
    testCompile "org.springframework:spring-test:${spring_version}"
    testCompile "org.springframework.security:spring-security-test:${spring_security_version}"
    testCompile "org.springframework.boot:spring-boot-test:${spring_boot_version}"
    testCompile "com.pholser:junit-quickcheck-core:0.6"
    testCompile "com.pholser:junit-quickcheck-generators:0.6"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "org.seleniumhq.selenium:selenium-support:${selenium_version}"
    testCompile "org.seleniumhq.selenium:selenium-api:${selenium_version}"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:${selenium_version}"
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:${selenium_version}"
    testCompile "org.fluentlenium:fluentlenium-junit:${fluentlenium_version}"
    testCompile "org.fluentlenium:fluentlenium-core:${fluentlenium_version}"
    testCompile "org.fluentlenium:fluentlenium-assertj:${fluentlenium_version}"
}


bootRun {
    addResources = true
    def profile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", profile ? profile : 'dev'
    systemProperty "server.cookie.secure", 'false'
}


node { nodeModulesDir = file("${project.projectDir}/../app") }

task buildAssets(type: NpmTask) {
    args = ['run', 'build']
}
task cleanAssets(type: NpmTask) { args = ['run', 'clean'] }
build.dependsOn buildAssets
jar.dependsOn buildAssets
clean.dependsOn cleanAssets

/**
 * Spring boot serves static content from /resources, so we need to process _after_ we've built em
 */
processResources.mustRunAfter clean
processResources.mustRunAfter buildAssets
jar.dependsOn processResources
bootRepackage.dependsOn processResources

/**
 * Tests
 */

test {
    include "**/*"
    systemProperties = System.properties //pass through
}